"use client";

import { useState } from "react";
import { FileText, Copy, FileDown, Check, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";

interface GeneratedContextDisplayProps {
  context: string;
  isLoading: boolean;
}

export function GeneratedContextDisplay({
  context,
  isLoading,
}: GeneratedContextDisplayProps) {
  const [copiedFormat, setCopiedFormat] = useState<string | null>(null);
  const { toast } = useToast();

  // Calculate context statistics
  const wordCount = context
    ? context
        .trim()
        .split(/\s+/)
        .filter((word) => word.length > 0).length
    : 0;
  const charCount = context ? context.length : 0;
  const readingTime = Math.max(1, Math.ceil(wordCount / 200)); // ~200 WPM

  const copyToClipboard = async (text: string, format: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedFormat(format);
      toast({
        title: "Copied!",
        description: `Context copied as ${format} format`,
      });

      // Reset the copied state after 2 seconds
      setTimeout(() => setCopiedFormat(null), 2000);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  const formatAsMarkdown = (context: string) => {
    return `# Development Context for AI Coding Assistant

${context}

---

*This context was generated by Projectron to help you work effectively with AI coding assistants.*`;
  };

  const formatAsPlainText = (context: string) => {
    return `DEVELOPMENT CONTEXT FOR AI CODING ASSISTANT

${context}

================================================================================

This context was generated by Projectron to help you work effectively with AI coding assistants.`;
  };

  const LoadingSkeleton = () => (
    <div className="space-y-3 animate-pulse">
      <div className="h-4 bg-hover-active rounded w-3/4"></div>
      <div className="h-4 bg-hover-active rounded w-full"></div>
      <div className="h-4 bg-hover-active rounded w-2/3"></div>
      <div className="h-4 bg-hover-active rounded w-5/6"></div>
      <div className="h-4 bg-hover-active rounded w-1/2"></div>
      <div className="h-4 bg-hover-active rounded w-4/5"></div>
      <div className="h-4 bg-hover-active rounded w-2/3"></div>
      <div className="h-4 bg-hover-active rounded w-full"></div>
      <div className="h-4 bg-hover-active rounded w-3/4"></div>
    </div>
  );

  return (
    <Card className="bg-secondary-background border-divider">
      <CardHeader>
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
          <div className="flex items-center gap-2">
            <FileText className="h-4 w-4 sm:h-5 sm:w-5 text-secondary-text" />
            <h3 className="text-base sm:text-lg font-semibold text-primary-text">
              Generated Development Context
            </h3>
          </div>

          {!isLoading && context && (
            <div className="flex items-center gap-2 text-xs text-secondary-text">
              <Clock className="h-3 w-3" />
              <span>{wordCount.toLocaleString()} words</span>
              <span>â€¢</span>
              <span>~{readingTime} min read</span>
            </div>
          )}
        </div>

        {!isLoading && context && (
          <p className="text-xs sm:text-sm text-secondary-text">
            Copy this context and paste it into your AI coding assistant for
            optimal development help.
          </p>
        )}
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Context display area */}
        <div className="relative">
          <Textarea
            value={isLoading ? "" : context}
            readOnly
            className="min-h-80 sm:min-h-96 max-h-[600px] bg-primary-background border-divider font-mono text-xs sm:text-sm resize-none overflow-y-auto"
            placeholder={
              isLoading ? "" : "Generated context will appear here..."
            }
          />

          {isLoading && (
            <div className="absolute inset-0 bg-primary-background border border-divider rounded-md p-4">
              <div className="flex gap-2 mb-4 text-secondary-text flex-col justify-start items-start">
                <div className="flex items-center gap-2">
                  <div className="h-4 w-4 animate-spin rounded-full border-2 border-primary-cta border-t-transparent" />
                  <span className="text-sm">
                    Generating comprehensive context...
                  </span>
                </div>
                <span className="text-xs">This may take 1-2 minutes </span>
              </div>
              <LoadingSkeleton />
            </div>
          )}
        </div>

        {/* Copy buttons */}
        {!isLoading && context && (
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2">
              <Button
                onClick={() => copyToClipboard(context, "Raw")}
                variant="outline"
                size="sm"
                className="text-sm w-full sm:w-auto"
              >
                {copiedFormat === "Raw" ? (
                  <Check className="mr-2 h-3 w-3 text-green-500" />
                ) : (
                  <Copy className="mr-2 h-3 w-3" />
                )}
                Copy All
              </Button>

              <Button
                onClick={() =>
                  copyToClipboard(formatAsMarkdown(context), "Markdown")
                }
                variant="outline"
                size="sm"
                className="text-sm w-full sm:w-auto"
              >
                {copiedFormat === "Markdown" ? (
                  <Check className="mr-2 h-3 w-3 text-green-500" />
                ) : (
                  <FileDown className="mr-2 h-3 w-3" />
                )}
                <span className="hidden sm:inline">Copy as Markdown</span>
                <span className="sm:hidden">Markdown</span>
              </Button>

              <Button
                onClick={() =>
                  copyToClipboard(formatAsPlainText(context), "Plain Text")
                }
                variant="outline"
                size="sm"
                className="text-sm w-full sm:w-auto"
              >
                {copiedFormat === "Plain Text" ? (
                  <Check className="mr-2 h-3 w-3 text-green-500" />
                ) : (
                  <FileText className="mr-2 h-3 w-3" />
                )}
                <span className="hidden sm:inline">Copy as Plain Text</span>
                <span className="sm:hidden">Plain Text</span>
              </Button>
            </div>

            <div className="text-xs text-secondary-text text-center sm:text-right">
              {charCount.toLocaleString()} characters
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
