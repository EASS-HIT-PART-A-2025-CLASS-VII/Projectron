# app/utils/context_utils.py
def format_context_for_export(context_message: str, format_type: str = "markdown") -> str:
    """
    Format the generated context for export in different formats.
    
    Args:
        context_message: The generated context message
        format_type: The format to export in ("markdown", "plain_text", "raw")
        
    Returns:
        Formatted string ready for copy/export
    """
    if format_type == "markdown":
        return format_as_markdown(context_message)
    elif format_type == "plain_text":
        return format_as_plain_text(context_message)
    elif format_type == "raw":
        return context_message
    else:
        raise ValueError(f"Unsupported format type: {format_type}")

def format_as_markdown(context_message: str) -> str:
    """Format context as markdown with header"""
    
    md_content = f"""# Development Context for AI Coding Assistant

{context_message}

---

*This context was generated by Projectron to help you work effectively with AI coding assistants.*
"""
    
    return md_content

def format_as_plain_text(context_message: str) -> str:
    """Format context as plain text with header"""
    
    text_content = f"""DEVELOPMENT CONTEXT FOR AI CODING ASSISTANT

{context_message}

================================================================================

This context was generated by Projectron to help you work effectively with AI coding assistants.
"""
    
    return text_content

def get_context_summary(context_message: str) -> dict:
    """
    Generate a summary of the context for display purposes.
    
    Returns:
        Dictionary with summary information
    """
    return {
        "length": len(context_message),
        "word_count": len(context_message.split()),
        "has_content": bool(context_message.strip()),
        "estimated_reading_time": max(1, len(context_message.split()) // 200)  # ~200 WPM
    }